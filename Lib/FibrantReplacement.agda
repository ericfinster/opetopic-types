--
--  FibrantReplacement.agda - Consructing the Fibrant Replacement of an Opetopic Type
--

open import Cubical.Foundations.Everything
open import Cubical.Data.Sigma
open import Cubical.Data.Nat 

open import Core.OpetopicType
open import Core.OpetopicMap

open import Lib.Structures

module Lib.FibrantReplacement where

  --
  --  The free groupoid generated by an opetopic type
  --

  FreeGrp : ∀ {ℓ} (X : 𝕆Type∞ {ℓ = ℓ} tt*) (n : ℕ) → 𝕆Type n ℓ 

  data FreeCell {ℓ} (X : 𝕆Type∞ {ℓ = ℓ} tt*) : {n : ℕ} (f : Frm (FreeGrp X n)) → Type ℓ 

  FreeInc : ∀ {ℓ} (X : 𝕆Type∞ {ℓ = ℓ} tt*)
    → (n : ℕ) → Skeleton X n ⇒ FreeGrp X n 

  FreeGrp X zero = tt*
  FreeGrp X (suc n) = FreeGrp X n , FreeCell X

  data FreeCell {ℓ} X where

    free-in : {n : ℕ} {f : Frm (Skeleton X n)}
      → (x : Fill (SkeletonExt X n) f)
      → FreeCell X (Frm⇒ (FreeInc X n) f)

    free-comp : {n : ℕ} 
      → {f : Frm (FreeGrp X n)}
      → (s : Src (FreeCell X) f)
      → FreeCell X f 

    free-fill : {n : ℕ} 
      → {f : Frm (FreeGrp X n)}
      → (s : Src (FreeCell X) f)
      → FreeCell X {suc n} (f , s , free-comp s)

    free-comp-unique : {n : ℕ} 
      → {f : Frm (FreeGrp X n)}
      → (s : Src (FreeCell X) f)
      → (t : FreeCell X f) (c : FreeCell X (f , s , t))
      → free-comp s ≡ t

    free-fill-unique : {n : ℕ} 
      → {f : Frm (FreeGrp X n)}
      → (s : Src (FreeCell X) f)
      → (t : FreeCell X f) (c : FreeCell X (f , s , t))
      → (λ i → FreeCell X (f , s , free-comp-unique s t c i))
          [ free-fill s ≡ c ] 

  FreeInc X zero = tt*
  FreeInc X (suc n) = FreeInc X n , free-in
